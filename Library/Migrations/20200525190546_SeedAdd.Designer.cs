// <auto-generated />
using System;
using Library;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Library.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20200525190546_SeedAdd")]
    partial class SeedAdd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Library.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1965, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Георг",
                            Surname = "Кельвінгтон"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1873, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Фрідріх",
                            Surname = "Ніцше"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1983, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Себастьян",
                            Surname = "Крудз"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(1878, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Фредеріка",
                            Surname = "Крудз"
                        });
                });

            modelBuilder.Entity("Library.Entities.AuthorBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("AuthorBooks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            BookId = 1
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            BookId = 2
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            BookId = 2
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 3,
                            BookId = 3
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 4,
                            BookId = 3
                        });
                });

            modelBuilder.Entity("Library.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Том в Гренландії"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Філософія думок"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Останній листок"
                        });
                });

            modelBuilder.Entity("Library.Entities.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Chapters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            Name = "Вступ"
                        },
                        new
                        {
                            Id = 2,
                            BookId = 1,
                            Name = "Пригоди тома"
                        },
                        new
                        {
                            Id = 3,
                            BookId = 1,
                            Name = "Завершення історії"
                        },
                        new
                        {
                            Id = 4,
                            BookId = 2,
                            Name = "Усе починається з думки"
                        },
                        new
                        {
                            Id = 5,
                            BookId = 2,
                            Name = "Думай серцем"
                        },
                        new
                        {
                            Id = 6,
                            BookId = 3,
                            Name = "Холодна осінь"
                        },
                        new
                        {
                            Id = 7,
                            BookId = 3,
                            Name = "Опале листя"
                        });
                });

            modelBuilder.Entity("Library.Entities.Reader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ReaderCardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReaderCardId");

                    b.ToTable("Readers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ReaderCardId = 1
                        },
                        new
                        {
                            Id = 2,
                            ReaderCardId = 2
                        },
                        new
                        {
                            Id = 3,
                            ReaderCardId = 3
                        });
                });

            modelBuilder.Entity("Library.Entities.ReaderCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReaderCards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 17,
                            DateOfRegistration = new DateTime(2018, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "pupkin_v@gmail.com",
                            Name = "Василій",
                            Surname = "Пупкін"
                        },
                        new
                        {
                            Id = 2,
                            Age = 19,
                            DateOfRegistration = new DateTime(2016, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "koz_a@gmail.com",
                            Name = "Анастасія",
                            Surname = "Козаченко"
                        },
                        new
                        {
                            Id = 3,
                            Age = 24,
                            DateOfRegistration = new DateTime(2019, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vitalii_dziuba@gmail.com",
                            Name = "Віталій",
                            Surname = "Дзюба"
                        });
                });

            modelBuilder.Entity("Library.Entities.Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfReceiving")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ReaderId");

                    b.ToTable("Records");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 3,
                            DateOfReceiving = new DateTime(2019, 10, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReaderId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 1,
                            DateOfReceiving = new DateTime(2020, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReaderId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookId = 2,
                            DateOfReceiving = new DateTime(2019, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReaderId = 2
                        },
                        new
                        {
                            Id = 4,
                            BookId = 3,
                            DateOfReceiving = new DateTime(2019, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReaderId = 2
                        },
                        new
                        {
                            Id = 5,
                            BookId = 1,
                            DateOfReceiving = new DateTime(2019, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReaderId = 3
                        });
                });

            modelBuilder.Entity("Library.Entities.AuthorBook", b =>
                {
                    b.HasOne("Library.Entities.Author", "Author")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Entities.Book", "Book")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Entities.Chapter", b =>
                {
                    b.HasOne("Library.Entities.Book", "Book")
                        .WithMany("Chapters")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Entities.Reader", b =>
                {
                    b.HasOne("Library.Entities.ReaderCard", "ReaderCard")
                        .WithMany()
                        .HasForeignKey("ReaderCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Entities.Record", b =>
                {
                    b.HasOne("Library.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Entities.Reader", "Reader")
                        .WithMany("Records")
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
